#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May  1 20:45:37 2018

@author: dhruvvaghela
"""
import numpy as np
import pandas as pd

# Importing dataeset
dataset = pd.read_csv("Churn_Modelling.csv")
X = dataset.iloc[:, 3:13].values
Y = dataset.iloc[:, 13].values

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_1 = LabelEncoder()
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = OneHotEncoder(categorical_features= [1])
X = onehotencoder.fit_transform(X).toarray()

# Removing the dummy variables generated by the label encoder.
# Also called as dummy variable trap
X = X[:, 1:]

# Splitting the training dataset into Training set and Test Set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

# Feature Scaling
# Feature scaling is a method used to standardize the range of independent variables or 
# features of data. In data processing, it is also known as data normalization and is 
# generally performed during the data preprocessing step.
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Importing Keras and other models
import keras
from keras.models import Sequential
from keras.layers import Dense


# Initializing the ANN
classifier = Sequential()

# Adding the input layer and first hidden layer
classifier.add(Dense(units=6, kernel_initializer='uniform', activation='relu', input_dim=11))

# Adding the second hidden layer
# Here the input_dim is not used because it knows that teh previous hidden layer is going 
# to provide 'n' number of output nodes
classifier.add(Dense(units=6, kernel_initializer='uniform', activation='relu'))

# Adding the output layar
# here the output node is 1, because we need a binary answer to whether the employee is going to
# leave the bank or stay
classifier.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))

# Compiling the ANN
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fitting the ANN to the training set
classifier.fit(X_train, Y_train, batch_size=10, epochs=100)

# Predicting the test set result
y_pred = classifier.predict(X_test)

# To convert these probabilities to boolean, we need a threshold to judge
# Threshold = 0.5
y_pred = (y_pred > 0.5)


# Making the confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, y_pred)

new_prediction = classifier.predict(sc.transform(np.array([[0.0,0,600,1,40,3,60000,2,1,1,50000]])))
new_prediction = (new_prediction > 0.5)
